package main
import(
	"fmt"
	"strings"
)
/*闭包的概念：函数里返回函数，第一层函数的内容为第二层函数共享，就像全局变量一样，参见第一个例子。
第一层函数初始化的时候开始确定，第二层函数基于第一层初始化后开始使用，参见第二个例子*/
func AddUpper() func(int) int{
	var n int = 10                          //n相当于在这个AddUpper函数里的全局变量一般，只被初始化一次
	return func(x int) int{
		n = n + x
		return n
	}
}

func makeSuffix(suffix string) func(string) string{
	return func(name string) string{
		if !strings.HasSuffix(suffix, name){
			return name + suffix
		}
		return name
	}
}

func main(){
	f := AddUpper()                  //通过初始化来执行第一层函数，第一层函数的变量成为全局性质的了
	fmt.Println(f(1))  //11          //初始化后格式按照第二层函数使用
	fmt.Println(f(2))  //13

	f2 := makeSuffix(".jpg")             //通过初始化来确定要比较的文件名后缀
	fmt.Println(f2("hh.jpg"))  //hh.jpg   
	//初始化后依照第二层函数的格式来使用，第一层函数的参数编程全局性质的了，所以不用再表示
	fmt.Println(f2("hhd"))     //hhd.jpg
}
