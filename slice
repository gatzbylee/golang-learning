package main
import(
	"fmt"
)

func main(){
	var intarr [5]int = [...]int{1, 55, 634, 64, 46}
	slice := intarr[1:3]   //选取数组下标1和2的元素
	fmt.Printf("slice address:%v. slice is %v. slice lens is %v. slice capacity is %v\n", &slice, slice, len(slice), cap(slice))
	//结果输出为slice address:&[55 634]. slice is [55 634]. slice lens is 2. slice capacity is 4
	fmt.Printf("intarr addr is %v %v\n", &intarr, &intarr[0])
	fmt.Printf("slice addr is %v\n", &slice[0])
	//这种slice是直接引用intarr数组的地址，由于是从第二个开始引用，所以数组的首地址为0x1200e400，slice就为0x1200e404，多四个字节
	//slice类似于结构体
	//tpye slice struct{
	//	ptr *[2]int
	//	len int
	//	cap int
	//}
	var slice2 []int = make([]int, 4, 10) //第二种创建切片的方法，4代表长度，10代表容量
	var slice3 []int = make([]int, 4)	//第三种方式，可以不指定容量，让系统自设
	var slice4 []string = []string{"tom", "jack", "mary"}  //第四种
	fmt.Printf("slice2 %v, lens %v, cap is %v\n", slice2, len(slice2), cap(slice2))
	fmt.Printf("slice3 %v, lens %v, cap is %v\n", slice3, len(slice3), cap(slice3))
	fmt.Printf("slice4 %v, lens %v, cap is %v\n", slice4, len(slice4), cap(slice4))

	var slice5 []int = []int{10, 20, 43, 56, 66}
	slice6 := append(slice5, slice2...) //append会生成一个新数组，而不是直接在slice5后面添加.如果添加的也是切片，需要加...
	fmt.Printf("slice5 is %v, slice6 is %v\n", slice5, slice6)
	var slice7 []int = make([]int, 10)
	var slice8 []int = make([]int, 2, 4)
	copy(slice7, slice5) //copy直接在第一个参数执行,它不需要加...
	copy(slice8, slice5) //如果切片复制超出范围，也不会报错，只是将能放入的放入,这和cap无关
	fmt.Printf("slice7 is %v, slice8 is %v\n", slice7, slice8)
}	
