数据类型转换可以大小互相转，大的变小的并不会报错，只是会溢出处理

基本数据类型转string   var i int =230; var str string; str = fmt.Sprintf("%d", i)  //Sprintf输出为格式化字符串，所以可以直接赋值

%t用于bool， %v是默认输出格式， %q用“”括起来，只对string类型有效，对于数值类型使用会输出空

Sprintf和Printf是不同的函数！前者可用于转换string数据类型，后者用于打印输出，都可用格式化形式%。

str = strconv.FormatInt(i, 10)  //另一种转成字符串的方式，FormatInt只适用于Int64位，如果i不是则需 int64(i) 转换一下，后面的10代表转成10进制
strconv.FormatFloat(num, 'f', 10, 64)  'f'指数据类型，10为留小数点十位，64为float64

var str string = "ture"; bo := strconv.ParseBool(str)string转基本类型

func main(){
	var str string = "True"
	bo, _ := strconv.ParseBool(str)             //:=只能用于函数内部，并无需显示的声明变量类型，而var则没有这个限制。
	//ParseBool返回两个值，所以要用_来将第二个值赋予空
	fmt.Printf("bo type is %T, bo = %v", bo, bo)
}

var i int = 10
	var ptr *int = &i
	//ptr 是个指针变量，他的类型是*int也就是指针类型，他本身的值为&i。&i也就是i变量所在的地址
	fmt.Printf("ptr=%v",ptr)     //ptr的值，也就是它指向的变量的地址值
	fmt.Printf("ptr的地址%v",&ptr) //ptr本身作为变量也有它自己的地址
	fmt.Printf("ptr指向的值%v",*ptr)  //ptr指向的地址里的值
  值类型要和指针类型一致
  
值类型：基本数据类型，数组，结构体struct           （通常在栈中分配）
引用类型：指针，切片slice，map，管道chan，interface（通常在堆区分配）

变量名，函数名，常量名首字母为大写是共有的，首字母小写是私有的！

i++ i-- 只能单独使用，防止像c++里那样的复杂

&&又叫短路与，因为a&&b 当a为false时后面b就不进行判断了，直接输出false
||又叫短路或，一样的，当a为true时b就不进行判断了，直接输出true
func test() bool{                //函数也可以这么用！
	fmt.Printf("testing...")
	return true
}
var i int = 10
if i>9 && test() {                          //当i>9为false时就会什么都不输出
		fmt.Printf("everythingsok")
	}

数组在go里在函数中是值传递的，和基本数据类型一样。不同于其他语言
go不支持重载，func test(x int, y int){...}  func test(x int){...}   ×

func sum(n1 int, n2 int) int{
	return n1 + n2
}

type myfun func(int, int) int   //支持数据类型自定义，但注意！不能放在main函数内部，因为区域不同，无法识别

func fun2(funvar myfun, num1 int, num2 int) int{   //myfun直接代替了 func(int, int) int
	return funvar(num1, num2)
}

func fun(funvar func(int, int) int, num1 int ,num2 int) int{  //函数也可作为形参，注意格式！
	return funvar(num1, num2)
}

func main(){
	a := sum            //函数也看做一种数据类型，可以如此的传给变量
	fmt.Printf("a type -> %T,sum type -> %T\n", a, sum)  //a type -> func(int, int) int,sum type -> func(int, int) int
	res := a(10, 20)
	fmt.Println(res)  //30
	res2 := fun(sum, 50, 60)
	fmt.Println(res2)  // 110
	res3 := fun2(sum, 70, 60)
	fmt.Println(res3)  //130
}

函数返回可以直接设置，但要用括号括起来！
func sum(n1 int, n2 int)(sum int, sub int){
	sum = n1 + n2
	sub = n1 - n2
	return              //返回sum和sub可加可不加
}

func sum(n1 int, args... int) (sum int) {      //n1为固定参数，也可没有固定的参数，这时这样写：func sum(args... int)
	sum = n1
	for i :=0; i < len(args); i++{
		sum += args[i]
	}
	return
}
func main(){
	res := sum(10)
	fmt.Println(res)         //10
	res = sum(10, 0, -1, 90)
	fmt.Println(res)          //99
}

func swap(n1 *int, n2 *int){              //注意指针和地址在函数中的用法！
	t := *n1
	*n1 = *n2
	*n2 = t 
}
func main(){
	n1 := 3
	n2 := 5
	swap(&n1, &n2)
	fmt.Println(n1, n2)
}
 
