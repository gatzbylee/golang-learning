package main
import(
	"fmt"
	"reflect"
)

type Monster struct{
	Name string `json:"name"`
	Age int		`json:"monster_age"`
	Score float64
	Sex string
}

func (s Monster) Print(){
	fmt.Println("------start------")
	fmt.Println(s)
	fmt.Println("------end------")
}

func (s Monster) GetSum(n1 int, n2 int) int{
	return n1 + n2
}

func (s Monster) Set(name string, age int, score float64, sex string) {
	s.Name = name
	s.Age = age
	s.Score = score
	s.Sex = sex
}

func TestStruct(a interface{}){
	typ := reflect.TypeOf(a)
	val := reflect.ValueOf(a)
	kd := val.Kind()
	if kd != reflect.Struct {  //kind用来检测进来的参数是不是reflect.Struct
		fmt.Println("expecting struct")
		return
	}

	num := val.NumField()        //获取字段数
	fmt.Printf("struct has %d field\n", num)
	for i := 0; i < num; i++{
		fmt.Printf("struct %d value is %v\n", i, val.Field(i))
		tagval := typ.Field(i).Tag.Get("json")  //获取标签值的固定用法
		if tagval != "" {
			fmt.Printf("field %d, tag is %v\n", i, tagval)
		}
	}
	numOfMethod := val.NumMethod()  //获取方法数
	fmt.Printf("struct has %d method\n", numOfMethod)
	val.Method(1).Call(nil) //Call里面放参数，第几个方法是按照Ascii顺序排列的

	var params []reflect.Value
	params = append(params, reflect.ValueOf(10))
	params = append(params, reflect.ValueOf(20))
	res := val.Method(0).Call(params)   
	//调用方法时Call里面放的是[]reflect.Value切片，而且它返回的也是[]reflect.Value切片
	fmt.Printf("res is %v\n",res[0].Int()) 
	//所以res[0]才能调用结果值，而且需要转换成int，因为reflect里面都是它的类型，也就是reflect.Value
}

func main(){
	var a Monster = Monster{
		Name:"Dragon",
		Age:567,
		Score:99.56,
		Sex:"male",
	}
	TestStruct(a)
}
